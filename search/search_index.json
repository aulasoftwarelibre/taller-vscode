{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taller de VSCode \u00b6 Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . El contenido del mismo es en parte de producci\u00f3n propia, en parte de otros manuales libres que pueden encontrarse en la secci\u00f3n de Referencias. El curso est\u00e1 basado y se corresponde con una ampliaci\u00f3n de lo visto en nuestro tutorial de VSCode publicado en Youtube Contenido \u00b6 Introducci\u00f3n Comandos y atajos Extensiones y configuraci\u00f3n Integraci\u00f3n con git Referencias Agradecimientos \u00b6 Este curso ha sido impartido por las siguientes personas: Rafael P\u00e9rez Antonio Moruno Licencia \u00b6 El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Taller de VSCode"},{"location":"#taller-de-vscode","text":"Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . El contenido del mismo es en parte de producci\u00f3n propia, en parte de otros manuales libres que pueden encontrarse en la secci\u00f3n de Referencias. El curso est\u00e1 basado y se corresponde con una ampliaci\u00f3n de lo visto en nuestro tutorial de VSCode publicado en Youtube","title":"Taller de VSCode"},{"location":"#contenido","text":"Introducci\u00f3n Comandos y atajos Extensiones y configuraci\u00f3n Integraci\u00f3n con git Referencias","title":"Contenido"},{"location":"#agradecimientos","text":"Este curso ha sido impartido por las siguientes personas: Rafael P\u00e9rez Antonio Moruno","title":"Agradecimientos"},{"location":"#licencia","text":"El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)","title":"Licencia"},{"location":"comandos/","text":"Comandos y atajos \u00b6 En esta secci\u00f3n veremos un listado de los comandos m\u00e1s relevantes de VSCode, los cuales aumentar\u00e1n nuestra velocidad al programar en gran medida. No son de uso obligatorio, es decir, podemos usar perfectamente VSCode sin estos comandos; pero el saberlos manejar nos har\u00e1 incrementar nuestra productividad exponencialmente. Archivos \u00b6 Comando Descripci\u00f3n Ctrl+N Abrir nuevo archivo Ctrl+O Abrir archivo existente Ctrl+K Ctrl+O Abrir carpeta existente Ctrl+K F Cerrar carpeta Ctrl+Shift+N Nueva ventana de VSCode Ctrl+W Cerrar pesta\u00f1a Ctrl+K Ctrl+W Cerrar todas las pesta\u00f1as Ctrl+S Guardar Ctrl+Shift+S Guardar como Ctrl+Q Cerrar VSCode Edici\u00f3n \u00b6 Comando Descripci\u00f3n Ctrl+X Cortar l\u00ednea (sin seleccionar) Ctrl+C Copiar l\u00ednea (sin seleccionar) Inicio/Fin Ir al principio/final de una l\u00ednea Ctrl+Shift+\\ Comentar Ctrl+Shift+A Comentar seleccion Shift+Flechas Seleccionar caracter Ctrl+Shift+Flechas Seleccionar palabra Ctrl+Space Sugerir F2 Renombrar variable Multicursor \u00b6 Comando Descripci\u00f3n Alt+Click Insertar cursor Shift+Alt+ \u2191 / \u2193 Insertar cursor arriba/abajo Ctrl+D Seleccionar la siguiente ocurrencia de la selecci\u00f3n Ctrl+Shift+L Seleccionar todas las ocurrencias de la selecci\u00f3n Shift+Alt + mover rat\u00f3n Selecci\u00f3n con multicursor Pantalla \u00b6 Comando Descripci\u00f3n F11 Pantalla completa (F11 para salir) Shift+Alt+0 Cambiar orientaci\u00f3n de pantalla dividida Ctrl+ / Ctrl- Aumentar/Reducir zoom Ctrl+K Z Modo Zen (Esc Esc para salir) Windows+Flechas direccionales Mover pesta\u00f1a Ctrl+J Abrir terminal integrada B\u00fasqueda \u00b6 Comando Descripci\u00f3n Ctrl+F Buscar Ctrl+H Reemplazar Ctrl+Shift+F Mostrar pesta\u00f1a de b\u00fasqueda Ctrl+Shift+H Reemplazar en todos los archivos F12 Ir a la definici\u00f3n (p.e. de una variable) Navegaci\u00f3n \u00b6 Comando Descripci\u00f3n Ctrl+ \u2191 / \u2193 Scroll hacia arriba/abajo Ctrl+P Ir al archivo Ctrl+G Ir a la l\u00ednea Ctrl-Shift+P Mostrar todos los comandos/opciones Ctrl+Shift+O Ir al s\u00edmbolo/variable Ctrl+Tab Moverse entre archivos abiertos Ctrl+K Ctrl+S Listado de comandos Ctrl+, Ajustes Crea tus propios comandos \u00b6 VSCode nos da la flexibilidad de poder crear y personalizar nuestros propios atajos de teclado, para que as\u00ed la experencia de escribir c\u00f3digo sea lo m\u00e1s c\u00f3moda posible. Para ello, tenemos que acceder a la configuraci\u00f3n de shortcuts mediante el comando Ctrl+K Ctrl+S . Dentro de esta ventana, podemos buscar el comando que queremos cambiar y establecer la combinaci\u00f3n de teclas que mejor se adapte a nuestros gustos. Warning Si introcudimos una combinaci\u00f3n de teclas para cambiar un comando, debemos tener cuidado de que no sea la misma para otro comando distinto. VSCode nos avisar\u00e1 de ello para que no nos ocurra","title":"Comandos y atajos"},{"location":"comandos/#comandos-y-atajos","text":"En esta secci\u00f3n veremos un listado de los comandos m\u00e1s relevantes de VSCode, los cuales aumentar\u00e1n nuestra velocidad al programar en gran medida. No son de uso obligatorio, es decir, podemos usar perfectamente VSCode sin estos comandos; pero el saberlos manejar nos har\u00e1 incrementar nuestra productividad exponencialmente.","title":"Comandos y atajos"},{"location":"comandos/#archivos","text":"Comando Descripci\u00f3n Ctrl+N Abrir nuevo archivo Ctrl+O Abrir archivo existente Ctrl+K Ctrl+O Abrir carpeta existente Ctrl+K F Cerrar carpeta Ctrl+Shift+N Nueva ventana de VSCode Ctrl+W Cerrar pesta\u00f1a Ctrl+K Ctrl+W Cerrar todas las pesta\u00f1as Ctrl+S Guardar Ctrl+Shift+S Guardar como Ctrl+Q Cerrar VSCode","title":"Archivos"},{"location":"comandos/#edicion","text":"Comando Descripci\u00f3n Ctrl+X Cortar l\u00ednea (sin seleccionar) Ctrl+C Copiar l\u00ednea (sin seleccionar) Inicio/Fin Ir al principio/final de una l\u00ednea Ctrl+Shift+\\ Comentar Ctrl+Shift+A Comentar seleccion Shift+Flechas Seleccionar caracter Ctrl+Shift+Flechas Seleccionar palabra Ctrl+Space Sugerir F2 Renombrar variable","title":"Edici\u00f3n"},{"location":"comandos/#multicursor","text":"Comando Descripci\u00f3n Alt+Click Insertar cursor Shift+Alt+ \u2191 / \u2193 Insertar cursor arriba/abajo Ctrl+D Seleccionar la siguiente ocurrencia de la selecci\u00f3n Ctrl+Shift+L Seleccionar todas las ocurrencias de la selecci\u00f3n Shift+Alt + mover rat\u00f3n Selecci\u00f3n con multicursor","title":"Multicursor"},{"location":"comandos/#pantalla","text":"Comando Descripci\u00f3n F11 Pantalla completa (F11 para salir) Shift+Alt+0 Cambiar orientaci\u00f3n de pantalla dividida Ctrl+ / Ctrl- Aumentar/Reducir zoom Ctrl+K Z Modo Zen (Esc Esc para salir) Windows+Flechas direccionales Mover pesta\u00f1a Ctrl+J Abrir terminal integrada","title":"Pantalla"},{"location":"comandos/#busqueda","text":"Comando Descripci\u00f3n Ctrl+F Buscar Ctrl+H Reemplazar Ctrl+Shift+F Mostrar pesta\u00f1a de b\u00fasqueda Ctrl+Shift+H Reemplazar en todos los archivos F12 Ir a la definici\u00f3n (p.e. de una variable)","title":"B\u00fasqueda"},{"location":"comandos/#navegacion","text":"Comando Descripci\u00f3n Ctrl+ \u2191 / \u2193 Scroll hacia arriba/abajo Ctrl+P Ir al archivo Ctrl+G Ir a la l\u00ednea Ctrl-Shift+P Mostrar todos los comandos/opciones Ctrl+Shift+O Ir al s\u00edmbolo/variable Ctrl+Tab Moverse entre archivos abiertos Ctrl+K Ctrl+S Listado de comandos Ctrl+, Ajustes","title":"Navegaci\u00f3n"},{"location":"comandos/#crea-tus-propios-comandos","text":"VSCode nos da la flexibilidad de poder crear y personalizar nuestros propios atajos de teclado, para que as\u00ed la experencia de escribir c\u00f3digo sea lo m\u00e1s c\u00f3moda posible. Para ello, tenemos que acceder a la configuraci\u00f3n de shortcuts mediante el comando Ctrl+K Ctrl+S . Dentro de esta ventana, podemos buscar el comando que queremos cambiar y establecer la combinaci\u00f3n de teclas que mejor se adapte a nuestros gustos. Warning Si introcudimos una combinaci\u00f3n de teclas para cambiar un comando, debemos tener cuidado de que no sea la misma para otro comando distinto. VSCode nos avisar\u00e1 de ello para que no nos ocurra","title":"Crea tus propios comandos"},{"location":"extensiones/","text":"Extensiones y configuraci\u00f3n \u00b6 En esta secci\u00f3n del taller, hablaremos de las extensiones, qu\u00e9 son y qu\u00e9 nos aportan a la hora de trabajar con VSCode. Tambi\u00e9n trataremos de personalizar y configurar el editor para que se adapte de la mejor manera posible a nuestras necesidades. Las extensiones son \"extras\" que nos ofrece VSCode, muy f\u00e1ciles de entender y descargar, las cuales nos permiten agregar al editor temas, autocompletado y funcionalidades que no vienen por defecto instataladas en VSCode, pero que son esenciales y aportan mucha utilidad. Vamos a ver las m\u00e1s usadas e importantes. \u00bfC\u00f3mo instalar una extensi\u00f3n? \u00b6 Si queremos probar alguna extensi\u00f3n en VSCode, podemos descargarla dentro del mismo editor, en la secci\u00f3n de extensiones. Dentro de esta, buscamos la extensi\u00f3n que queramos instalar y listo. A veces es necesario reiniciar el editor para que se aplique correctamente la extensi\u00f3n, pero la mayor\u00eda de las veces esta funcionar\u00e1 sin problema. Temas e iconos \u00b6 Existen numerosas extensiones que nos permiten personalizar el aspecto de nuestro editor. Podemos tanto cambiar el tema de colores como los iconos. A la hora de los iconos, podemos encontrar Material Icon Theme, la cual es una de las m\u00e1s utilizadas por la comunidad. Esta extensi\u00f3n nos ofrece soporte para casi cualquier tipo de archivo, haciendo que, visualmente, sea muy f\u00e1cil diferenciar el tipo de archivo seg\u00fan su extensi\u00f3n (si es .ts, .c++, .py, etc.) Cuando hablamos de temas, hay much\u00edsima m\u00e1s variedad. Algunos de los m\u00e1s utilizados son los siguientes: Monokai Pro Atomized Material Theme Cobalt2 Theme Existen decenas de temas distintos, as\u00ed que si\u00e9ntete libre de probar todos hasta que encuentres tu favorito. Intellisense y snippets \u00b6 VSCode tambi\u00e9n nos ofrece extensiones para que podamos trabajar de la mejor manera con los diferentes lenguajes de programaci\u00f3n, framworks, librerias, etc. Estas extensiones ayudan al autocompletado de c\u00f3digo y a aumentar nuestra velocidad programando, lo cual es esencial. Podemos encontrar: Angular Snippets , para los que trabajan con este framework ES7 React/Redux/GraphQL/React-Native snippets y Simple React Snippets , para los que utilizan React, React Native, GraphQL, etc. C/C++ , a\u00f1adiendo soporte de IntelliSense (autocompletado) para C y C++. HTML CSS Support y HTML Snippets , las cuales agilizan el desarrollo de c\u00f3digo HTML y CSS. JavaScript (ES6) code snippets , para el desarrollo con JavaScript y TypeScript. Formateo de c\u00f3digo \u00b6 Esta secci\u00f3n es realmente importante, ya que darle formato a tu c\u00f3digo es algo que puede llevar mucho tiempo y ser bastante tedioso. Con los formateadores de c\u00f3digo, nos olvidamos de esta tarea, ya que ser\u00e1n estos los que den formato a todo nuestro archivo seg\u00fan las reglas que les predefinamos. Existen formateadores de c\u00f3digo para pr\u00e1cticamente todos los lenguajes (por ejemplo, C/C++ para C y C++), aunque en este taller mostraremos Prettier, uno de los m\u00e1s usados (para JavaScript y TypeScript). Prettier es, sin lugar a dudas, una de las mejores extensiones que nos ofrece VSCode, siendo esta utilizada por millones de personas, ya que hace que no sea necesario formatear c\u00f3digo manualmente. Una vez instalada, podemos ir a los ajustes con Ctrl+, , y configurar Prettier a nuestro gusto. Podemos elegir si incluir parentesis en funciones de flecha con 1 solo par\u00e1metro, si usar siempre \"\" o '' , a\u00f1adir autom\u00e1ticamente los ; al final de cada l\u00ednea, controlar el espaciado en objetos, el tama\u00f1o de l\u00ednea, la indentaci\u00f3n, etc. Para poder usar Prettier, basta con (dentro de nuestro archivo .ts/.js) utilizar el comando Ctrl+Shift+I , y autom\u00e1ticamente el c\u00f3digo se ajustar\u00e1 a las reglas que hayamos definido en la configuraci\u00f3n de Prettier. Tambi\u00e9n existe la opci\u00f3n de que, siempre que guardemos los cambios realizados en un archivo, se aplique autom\u00e1ticamente el formateo de c\u00f3digo. Para ello existe la opci\u00f3n Format On Save , la cual permitir\u00e1 que Prettier o cualquier otro formateador de c\u00f3digo act\u00fae tan pronto como guardamos los cambios. As\u00ed, nos ahorrar\u00edamos tener que utilizar el comando Ctrl+Shift+I cada vez que queramos formatear el c\u00f3digo de nuestro archivo. Otras extensiones \u00b6 Live Share \u00b6 Live Share nos permite editar archivos y c\u00f3digo de forma colaborativa en tiempo real, independientemente del lenguaje de programaci\u00f3n o de los ajustes de nuestro editor. Esta forma de colaboraci\u00f3n es tremendamente \u00fatil, ya que permite crear sesiones donde otros programadores pueden unirse desde sus propios equipos, y as\u00ed poder trabajar sobre el mismo c\u00f3digo a la vez. Docker \u00b6 Docker tambi\u00e9n tiene su cabida en VSCode, ya que cuenta con una extensi\u00f3n la cual nos ayuda a construir, manejar y desplegar contenedores de una forma intuitiva y sencilla. Todo \u00b6 Un TODO es una tarea que tenemos por hacer. Trabajar en VSCode utilizando los TODO es interesante a la hora de tener localizadas en tu c\u00f3digo las funciones o caracter\u00edsticas que queramos a\u00f1adir. Podemos utilizar 2 extensiones: TODO Highlight : Esta extensi\u00f3n nos resalta las secciones de nuestro c\u00f3digo en la que hayamos escrito TODO , para as\u00ed poderlos localizar m\u00e1s facilmente. TODO Tree : Si quisieramos ver todos los TODO que tenemos en nuestro espacio de trabajo, esta extensi\u00f3n nos mostrar\u00eda un listado de ellos, para que sea m\u00e1s f\u00e1cil encontrarlos y acceder a ellos. Bookmarks \u00b6 Bookmarks nos ofrece pr\u00e1cticamente lo mismo que un TODO. Un bookmark consiste en una etiqueta que podemos a\u00f1adir a cualquier l\u00ednea de nuestro c\u00f3digo mediante el comando Ctrl+Alt+K , para poder volver a ella m\u00e1s f\u00e1cilmente. Al igual que con TODO Tree, podemos acceder a una pesta\u00f1a donde veamos todos los bookmarks que hemos a\u00f1adido a los diferentes archivos de nuestro espacio de trabajo. Bracket pair colorization \u00b6 Hasta hace apenas unos meses, esta extensi\u00f3n nos permit\u00eda identificar las parejas de par\u00e9ntesis, corchetes o llaves mediante colores. Sin embargo, VSCode incluy\u00f3 esto dentro de sus propios ajustes, por lo que merece la pena comentar como configurarlo. S\u00f3lo hay que busca en ajustes Bracket pair colorization y activar la opci\u00f3n para que VSCode nos ofrezca esta funcionalidad. Configuraciones extra \u00b6 Para finalizar, hemos de tener en cuenta que existen numerosos ajustes que podemos cambiar y modificar para asemejar VSCode lo m\u00e1ximo posible a nuestros gustos. No cubriremos todos en este taller ya que, al haber tantos, ser\u00eda imposible. No obstante, cabe destacar que podemos acceder a un archivo llamado settings.json , donde encontraremos muchos de los ajustes que hemos ido haciendo a lo largo del taller, y donde podremos tambi\u00e9n a\u00f1adir o modificar algunos nuevos. Para acceder a \u00e9l, introducimos el comando Ctrl+K Ctrl+S para buscar el comando que le corresponde. Escribimos arriba settings.json y, en nuestro caso, nos muestra que no existe comando para acceder a \u00e9l. Utilizar el comando que nosotros queramos (siempre y cuando no est\u00e9 ya ocupado). Podemos elegir, por ejemplo, el siguiente comando: Ctrl+Shift+J . Una vez introducido el comando, ya podremos acceder al archivo settings.json donde podemos configurar varios par\u00e1metros como la fuente, el tipo y el tama\u00f1o de letra; y por el contrario tambi\u00e9n podemos ver ajustes que ya realizamos anteriormente como los ajustes de Prettier y otros m\u00e1s.","title":"Extensiones y configuraci\u00f3n"},{"location":"extensiones/#extensiones-y-configuracion","text":"En esta secci\u00f3n del taller, hablaremos de las extensiones, qu\u00e9 son y qu\u00e9 nos aportan a la hora de trabajar con VSCode. Tambi\u00e9n trataremos de personalizar y configurar el editor para que se adapte de la mejor manera posible a nuestras necesidades. Las extensiones son \"extras\" que nos ofrece VSCode, muy f\u00e1ciles de entender y descargar, las cuales nos permiten agregar al editor temas, autocompletado y funcionalidades que no vienen por defecto instataladas en VSCode, pero que son esenciales y aportan mucha utilidad. Vamos a ver las m\u00e1s usadas e importantes.","title":"Extensiones y configuraci\u00f3n"},{"location":"extensiones/#como-instalar-una-extension","text":"Si queremos probar alguna extensi\u00f3n en VSCode, podemos descargarla dentro del mismo editor, en la secci\u00f3n de extensiones. Dentro de esta, buscamos la extensi\u00f3n que queramos instalar y listo. A veces es necesario reiniciar el editor para que se aplique correctamente la extensi\u00f3n, pero la mayor\u00eda de las veces esta funcionar\u00e1 sin problema.","title":"\u00bfC\u00f3mo instalar una extensi\u00f3n?"},{"location":"extensiones/#temas-e-iconos","text":"Existen numerosas extensiones que nos permiten personalizar el aspecto de nuestro editor. Podemos tanto cambiar el tema de colores como los iconos. A la hora de los iconos, podemos encontrar Material Icon Theme, la cual es una de las m\u00e1s utilizadas por la comunidad. Esta extensi\u00f3n nos ofrece soporte para casi cualquier tipo de archivo, haciendo que, visualmente, sea muy f\u00e1cil diferenciar el tipo de archivo seg\u00fan su extensi\u00f3n (si es .ts, .c++, .py, etc.) Cuando hablamos de temas, hay much\u00edsima m\u00e1s variedad. Algunos de los m\u00e1s utilizados son los siguientes: Monokai Pro Atomized Material Theme Cobalt2 Theme Existen decenas de temas distintos, as\u00ed que si\u00e9ntete libre de probar todos hasta que encuentres tu favorito.","title":"Temas e iconos"},{"location":"extensiones/#intellisense-y-snippets","text":"VSCode tambi\u00e9n nos ofrece extensiones para que podamos trabajar de la mejor manera con los diferentes lenguajes de programaci\u00f3n, framworks, librerias, etc. Estas extensiones ayudan al autocompletado de c\u00f3digo y a aumentar nuestra velocidad programando, lo cual es esencial. Podemos encontrar: Angular Snippets , para los que trabajan con este framework ES7 React/Redux/GraphQL/React-Native snippets y Simple React Snippets , para los que utilizan React, React Native, GraphQL, etc. C/C++ , a\u00f1adiendo soporte de IntelliSense (autocompletado) para C y C++. HTML CSS Support y HTML Snippets , las cuales agilizan el desarrollo de c\u00f3digo HTML y CSS. JavaScript (ES6) code snippets , para el desarrollo con JavaScript y TypeScript.","title":"Intellisense y snippets"},{"location":"extensiones/#formateo-de-codigo","text":"Esta secci\u00f3n es realmente importante, ya que darle formato a tu c\u00f3digo es algo que puede llevar mucho tiempo y ser bastante tedioso. Con los formateadores de c\u00f3digo, nos olvidamos de esta tarea, ya que ser\u00e1n estos los que den formato a todo nuestro archivo seg\u00fan las reglas que les predefinamos. Existen formateadores de c\u00f3digo para pr\u00e1cticamente todos los lenguajes (por ejemplo, C/C++ para C y C++), aunque en este taller mostraremos Prettier, uno de los m\u00e1s usados (para JavaScript y TypeScript). Prettier es, sin lugar a dudas, una de las mejores extensiones que nos ofrece VSCode, siendo esta utilizada por millones de personas, ya que hace que no sea necesario formatear c\u00f3digo manualmente. Una vez instalada, podemos ir a los ajustes con Ctrl+, , y configurar Prettier a nuestro gusto. Podemos elegir si incluir parentesis en funciones de flecha con 1 solo par\u00e1metro, si usar siempre \"\" o '' , a\u00f1adir autom\u00e1ticamente los ; al final de cada l\u00ednea, controlar el espaciado en objetos, el tama\u00f1o de l\u00ednea, la indentaci\u00f3n, etc. Para poder usar Prettier, basta con (dentro de nuestro archivo .ts/.js) utilizar el comando Ctrl+Shift+I , y autom\u00e1ticamente el c\u00f3digo se ajustar\u00e1 a las reglas que hayamos definido en la configuraci\u00f3n de Prettier. Tambi\u00e9n existe la opci\u00f3n de que, siempre que guardemos los cambios realizados en un archivo, se aplique autom\u00e1ticamente el formateo de c\u00f3digo. Para ello existe la opci\u00f3n Format On Save , la cual permitir\u00e1 que Prettier o cualquier otro formateador de c\u00f3digo act\u00fae tan pronto como guardamos los cambios. As\u00ed, nos ahorrar\u00edamos tener que utilizar el comando Ctrl+Shift+I cada vez que queramos formatear el c\u00f3digo de nuestro archivo.","title":"Formateo de c\u00f3digo"},{"location":"extensiones/#otras-extensiones","text":"","title":"Otras extensiones"},{"location":"extensiones/#live-share","text":"Live Share nos permite editar archivos y c\u00f3digo de forma colaborativa en tiempo real, independientemente del lenguaje de programaci\u00f3n o de los ajustes de nuestro editor. Esta forma de colaboraci\u00f3n es tremendamente \u00fatil, ya que permite crear sesiones donde otros programadores pueden unirse desde sus propios equipos, y as\u00ed poder trabajar sobre el mismo c\u00f3digo a la vez.","title":"Live Share"},{"location":"extensiones/#docker","text":"Docker tambi\u00e9n tiene su cabida en VSCode, ya que cuenta con una extensi\u00f3n la cual nos ayuda a construir, manejar y desplegar contenedores de una forma intuitiva y sencilla.","title":"Docker"},{"location":"extensiones/#todo","text":"Un TODO es una tarea que tenemos por hacer. Trabajar en VSCode utilizando los TODO es interesante a la hora de tener localizadas en tu c\u00f3digo las funciones o caracter\u00edsticas que queramos a\u00f1adir. Podemos utilizar 2 extensiones: TODO Highlight : Esta extensi\u00f3n nos resalta las secciones de nuestro c\u00f3digo en la que hayamos escrito TODO , para as\u00ed poderlos localizar m\u00e1s facilmente. TODO Tree : Si quisieramos ver todos los TODO que tenemos en nuestro espacio de trabajo, esta extensi\u00f3n nos mostrar\u00eda un listado de ellos, para que sea m\u00e1s f\u00e1cil encontrarlos y acceder a ellos.","title":"Todo"},{"location":"extensiones/#bookmarks","text":"Bookmarks nos ofrece pr\u00e1cticamente lo mismo que un TODO. Un bookmark consiste en una etiqueta que podemos a\u00f1adir a cualquier l\u00ednea de nuestro c\u00f3digo mediante el comando Ctrl+Alt+K , para poder volver a ella m\u00e1s f\u00e1cilmente. Al igual que con TODO Tree, podemos acceder a una pesta\u00f1a donde veamos todos los bookmarks que hemos a\u00f1adido a los diferentes archivos de nuestro espacio de trabajo.","title":"Bookmarks"},{"location":"extensiones/#bracket-pair-colorization","text":"Hasta hace apenas unos meses, esta extensi\u00f3n nos permit\u00eda identificar las parejas de par\u00e9ntesis, corchetes o llaves mediante colores. Sin embargo, VSCode incluy\u00f3 esto dentro de sus propios ajustes, por lo que merece la pena comentar como configurarlo. S\u00f3lo hay que busca en ajustes Bracket pair colorization y activar la opci\u00f3n para que VSCode nos ofrezca esta funcionalidad.","title":"Bracket pair colorization"},{"location":"extensiones/#configuraciones-extra","text":"Para finalizar, hemos de tener en cuenta que existen numerosos ajustes que podemos cambiar y modificar para asemejar VSCode lo m\u00e1ximo posible a nuestros gustos. No cubriremos todos en este taller ya que, al haber tantos, ser\u00eda imposible. No obstante, cabe destacar que podemos acceder a un archivo llamado settings.json , donde encontraremos muchos de los ajustes que hemos ido haciendo a lo largo del taller, y donde podremos tambi\u00e9n a\u00f1adir o modificar algunos nuevos. Para acceder a \u00e9l, introducimos el comando Ctrl+K Ctrl+S para buscar el comando que le corresponde. Escribimos arriba settings.json y, en nuestro caso, nos muestra que no existe comando para acceder a \u00e9l. Utilizar el comando que nosotros queramos (siempre y cuando no est\u00e9 ya ocupado). Podemos elegir, por ejemplo, el siguiente comando: Ctrl+Shift+J . Una vez introducido el comando, ya podremos acceder al archivo settings.json donde podemos configurar varios par\u00e1metros como la fuente, el tipo y el tama\u00f1o de letra; y por el contrario tambi\u00e9n podemos ver ajustes que ya realizamos anteriormente como los ajustes de Prettier y otros m\u00e1s.","title":"Configuraciones extra"},{"location":"git/","text":"Integraci\u00f3n con git \u00b6 En esta secci\u00f3n del taller, vamos a integrar git con VSCode, lo cual es muy \u00fatil y nos ayuda a tener todo en un mismo entorno. Lo primero que debemos hacer es tener git instalado. Tenemos otro taller donde se explica git en profundidad, desde lo m\u00e1s b\u00e1sico a los aspectos m\u00e1s avanzados. Ser\u00e1 necesario conocer la terminolog\u00eda que utiliza git para saber manejarlo en VSCode. Clonar el repositorio \u00b6 Ya habiendo instalado git, accedemos a la pesta\u00f1a que nos aparece en la barra lateral izquierda. Nos saldr\u00e1n 2 opciones: Abrir una carpeta: Podemos abrir una carpeta donde ya se encuentre inicializado un repositorio. Clonar un repositorio: Nos saldr\u00e1 un mensaje que nos pedir\u00e1 la url que nos da GitHub cuando queremos clonar un repositorio, y se nos inicializar\u00e1 donde seleccionemos. Trabajando con git \u00b6 Cuando hayamos abierto la carpeta en la que tenemos nuestro repositorio, ya podremos trabajar con git dentro de nuestro editor. Imaginemos que tenemos el siguiente proyecto abierto y que hemos realizado cambios en el archivo index.ts. En nuestro ejemplo, simplemente vamos a cambiar el puerto en el que se nos abre por defecto del 3000 al 4000. Despu\u00e9s de guardar los cambios, al acceder a la secci\u00f3n de git dentro de VSCode podremos ver todos los archivos que han sido modificados. Vemos que VSCode nos muestra el archivo index.ts que acabamos de cambiar. Podemos tanto deshacer los cambios del archivo, como ver que es lo que hemos modificado haciendo click en \u00e9l. Confirmar y subir cambios \u00b6 Para realizar un commit, aqu\u00ed no es necesario hacer ning\u00fan git add ni nada por el estilo. Simplemente bastar\u00eda con escribir el nombre de nuestro commit encima de donde aparecen todos los archivos que hemos modificado y pulsar Ctrl+Enter . Tambi\u00e9n podemos hacer un git push . Para ello, desplegamos el men\u00fa de opciones dentro de nuestra pesta\u00f1a de git en VSCode, y seleccionamos la opci\u00f3n Push . Esto subir\u00e1 todos los commits que hayamos confirmado a GitHub. En este taller pretendemos introducir esta integraci\u00f3n y explicar brevemente su funcionamiento b\u00e1sico. A\u00fan as\u00ed, hay que tener en cuenta que VSCode ofrece muchas funcionalidades a\u00fan m\u00e1s avanzadas de git y que pueden realizarse perfectamente desde el editor, como mergear, usar tags, deshacer commits, etc. No cubriremos todas en este taller ya que ser\u00eda demasiado extenso.","title":"Integraci\u00f3n con git"},{"location":"git/#integracion-con-git","text":"En esta secci\u00f3n del taller, vamos a integrar git con VSCode, lo cual es muy \u00fatil y nos ayuda a tener todo en un mismo entorno. Lo primero que debemos hacer es tener git instalado. Tenemos otro taller donde se explica git en profundidad, desde lo m\u00e1s b\u00e1sico a los aspectos m\u00e1s avanzados. Ser\u00e1 necesario conocer la terminolog\u00eda que utiliza git para saber manejarlo en VSCode.","title":"Integraci\u00f3n con git"},{"location":"git/#clonar-el-repositorio","text":"Ya habiendo instalado git, accedemos a la pesta\u00f1a que nos aparece en la barra lateral izquierda. Nos saldr\u00e1n 2 opciones: Abrir una carpeta: Podemos abrir una carpeta donde ya se encuentre inicializado un repositorio. Clonar un repositorio: Nos saldr\u00e1 un mensaje que nos pedir\u00e1 la url que nos da GitHub cuando queremos clonar un repositorio, y se nos inicializar\u00e1 donde seleccionemos.","title":"Clonar el repositorio"},{"location":"git/#trabajando-con-git","text":"Cuando hayamos abierto la carpeta en la que tenemos nuestro repositorio, ya podremos trabajar con git dentro de nuestro editor. Imaginemos que tenemos el siguiente proyecto abierto y que hemos realizado cambios en el archivo index.ts. En nuestro ejemplo, simplemente vamos a cambiar el puerto en el que se nos abre por defecto del 3000 al 4000. Despu\u00e9s de guardar los cambios, al acceder a la secci\u00f3n de git dentro de VSCode podremos ver todos los archivos que han sido modificados. Vemos que VSCode nos muestra el archivo index.ts que acabamos de cambiar. Podemos tanto deshacer los cambios del archivo, como ver que es lo que hemos modificado haciendo click en \u00e9l.","title":"Trabajando con git"},{"location":"git/#confirmar-y-subir-cambios","text":"Para realizar un commit, aqu\u00ed no es necesario hacer ning\u00fan git add ni nada por el estilo. Simplemente bastar\u00eda con escribir el nombre de nuestro commit encima de donde aparecen todos los archivos que hemos modificado y pulsar Ctrl+Enter . Tambi\u00e9n podemos hacer un git push . Para ello, desplegamos el men\u00fa de opciones dentro de nuestra pesta\u00f1a de git en VSCode, y seleccionamos la opci\u00f3n Push . Esto subir\u00e1 todos los commits que hayamos confirmado a GitHub. En este taller pretendemos introducir esta integraci\u00f3n y explicar brevemente su funcionamiento b\u00e1sico. A\u00fan as\u00ed, hay que tener en cuenta que VSCode ofrece muchas funcionalidades a\u00fan m\u00e1s avanzadas de git y que pueden realizarse perfectamente desde el editor, como mergear, usar tags, deshacer commits, etc. No cubriremos todas en este taller ya que ser\u00eda demasiado extenso.","title":"Confirmar y subir cambios"},{"location":"introduccion/","text":"Introducci\u00f3n \u00b6 Visual Studio Code es un editor de c\u00f3digo de software libre que fue desarrollado por Microsoft en 2015. Es multiplataforma y cuenta con numerosas funcionalidades que le colocan como uno de los editores m\u00e1s usados por programadores de todo el mundo. Entre algunas de sus caracter\u00edsticas, encontramos soporte para el autocompletado de c\u00f3digo, comandos que agilizan el desarrollo, integraci\u00f3n con el control de versiones git, entre otras. Adem\u00e1s, cuenta con soporte para numerosos lenguajes, entre los cuales se encuentran los m\u00e1s usados a nivel mundial como JavaScript, C, C++, PHP, Python, etc. Tambi\u00e9n posee una interfaz muy intuitiva, la cual nos ayuda a que la experiencia de escribir c\u00f3digo se haga lo m\u00e1s agradable posible. En este taller, trataremos las funcionalidades m\u00e1s importantes de VSCode, intentando exprimir al m\u00e1ximo su potencial y configurando un entorno de desarrollo lo m\u00e1s \u00f3ptimo posible. Descarga \u00b6 Para descargarlo, podemos acceder a la tienda de aplicaciones que poseen algunas distribuciones como Ubuntu. Esto es lo m\u00e1s r\u00e1pido y sencillo. A\u00fan as\u00ed, tambi\u00e9n podemos descargar el editor desde la p\u00e1gina web oficial . En cuanto lo tengamos descargado e instalado, podemos iniciarlo y se nos mostrar\u00e1 la interfaz del editor. Tenemos en la barra superior las opciones b\u00e1sicas con las que cuenta cualquier editor, para abrir y cerrar archivos, editar, etc. Adem\u00e1s, en la barra de la derecha nos aparecer\u00e1n por defecto 5 iconos: Explorador: Ah\u00ed se nos mostrar\u00e1n los archivos contenidos en nuestro espacio de trabajo. Buscador: Podemos buscar t\u00e9rminos a trav\u00e9s de todos los archivos de nuestra carpeta en esta secci\u00f3n, obteniendo todos los resultados encontrados en los diferentes archivos. Git: Integraci\u00f3n con git. Lo explicaremos m\u00e1s adelante. Depurador: Utilizado para encontrar los errores de nuestro c\u00f3digo. Extensiones: Herramientas que nos aportan funcionalidades adicionales para desarrollar nuestro c\u00f3digo. Mostraremos las m\u00e1s relevantes a lo largo del curso. Comenzando con el taller \u00b6 Para comenzar con el taller, abriremos un archivo donde podamos aplicar los diferentes comandos y atajos que se ense\u00f1ar\u00e1n en la primera secci\u00f3n del curso. Para ello, podemos abrir directamente un archivo con Ctrl+O , una carpeta con Ctrl+K Ctrl+O , o podemos crear el archivo con Ctrl+N .","title":"Introducci\u00f3n"},{"location":"introduccion/#introduccion","text":"Visual Studio Code es un editor de c\u00f3digo de software libre que fue desarrollado por Microsoft en 2015. Es multiplataforma y cuenta con numerosas funcionalidades que le colocan como uno de los editores m\u00e1s usados por programadores de todo el mundo. Entre algunas de sus caracter\u00edsticas, encontramos soporte para el autocompletado de c\u00f3digo, comandos que agilizan el desarrollo, integraci\u00f3n con el control de versiones git, entre otras. Adem\u00e1s, cuenta con soporte para numerosos lenguajes, entre los cuales se encuentran los m\u00e1s usados a nivel mundial como JavaScript, C, C++, PHP, Python, etc. Tambi\u00e9n posee una interfaz muy intuitiva, la cual nos ayuda a que la experiencia de escribir c\u00f3digo se haga lo m\u00e1s agradable posible. En este taller, trataremos las funcionalidades m\u00e1s importantes de VSCode, intentando exprimir al m\u00e1ximo su potencial y configurando un entorno de desarrollo lo m\u00e1s \u00f3ptimo posible.","title":"Introducci\u00f3n"},{"location":"introduccion/#descarga","text":"Para descargarlo, podemos acceder a la tienda de aplicaciones que poseen algunas distribuciones como Ubuntu. Esto es lo m\u00e1s r\u00e1pido y sencillo. A\u00fan as\u00ed, tambi\u00e9n podemos descargar el editor desde la p\u00e1gina web oficial . En cuanto lo tengamos descargado e instalado, podemos iniciarlo y se nos mostrar\u00e1 la interfaz del editor. Tenemos en la barra superior las opciones b\u00e1sicas con las que cuenta cualquier editor, para abrir y cerrar archivos, editar, etc. Adem\u00e1s, en la barra de la derecha nos aparecer\u00e1n por defecto 5 iconos: Explorador: Ah\u00ed se nos mostrar\u00e1n los archivos contenidos en nuestro espacio de trabajo. Buscador: Podemos buscar t\u00e9rminos a trav\u00e9s de todos los archivos de nuestra carpeta en esta secci\u00f3n, obteniendo todos los resultados encontrados en los diferentes archivos. Git: Integraci\u00f3n con git. Lo explicaremos m\u00e1s adelante. Depurador: Utilizado para encontrar los errores de nuestro c\u00f3digo. Extensiones: Herramientas que nos aportan funcionalidades adicionales para desarrollar nuestro c\u00f3digo. Mostraremos las m\u00e1s relevantes a lo largo del curso.","title":"Descarga"},{"location":"introduccion/#comenzando-con-el-taller","text":"Para comenzar con el taller, abriremos un archivo donde podamos aplicar los diferentes comandos y atajos que se ense\u00f1ar\u00e1n en la primera secci\u00f3n del curso. Para ello, podemos abrir directamente un archivo con Ctrl+O , una carpeta con Ctrl+K Ctrl+O , o podemos crear el archivo con Ctrl+N .","title":"Comenzando con el taller"},{"location":"referencias/","text":"Referencias \u00b6 Tutorial en Youtube de VSCode del Aula de Software Libre Web oficial de VSCode Documentaci\u00f3n oficial (en ingl\u00e9s) Marketplace de extensiones de VSCode","title":"Referencias"},{"location":"referencias/#referencias","text":"Tutorial en Youtube de VSCode del Aula de Software Libre Web oficial de VSCode Documentaci\u00f3n oficial (en ingl\u00e9s) Marketplace de extensiones de VSCode","title":"Referencias"}]}